"use strict";

////////////////////////////////

load("my_init.js");

////////////////////////////////

function concatArray(ary1, ary2){
  var newAry = [];
  _ma(ary1).each(function(it){
    newAry.push(it);
  });
  _ma(ary2).each(function(it){
    newAry.push(it);
  });
  return newAry;
}

// single quote
function squote(str){
  return "'" + str
    .replace(/'/g, "''")
    .replace(/\r/g, "\\r")
    .replace(/\n/g, "\\n")
    .replace(/\t/g, "\\t")
  + "'";
}

////////////////////////////////

function getConnection(rdbms, url, prop){
  if(rdbms === 'mysql'){
    return Packages.com.mysql.jdbc.Driver().connect(url, prop);
  }else{
    throw new Error("not yet implmented");
  }
}

function withConnection(config, fn){
  var prop = new java.util.Properties();
  prop.put("user", config.user);
  prop.put("password", config.password);
  
  var conn;
  try{
    conn = getConnection(config.rdbms, config.url, prop);
    fn(conn);
  }finally{
    if(conn){ conn.close(); }
  }
}

function withStatement(conn, fn){
  var stmt;
  try{
    stmt = conn.createStatement();
    fn(stmt);
  }finally{
    if(stmt){ stmt.close(); }
  }
}

////////////////////////////////

var TableTsv = (function(){
  
  function TableTsv(src){
    this.src = src;
  }

  TableTsv.prototype.getInfo = function(){
    var head = this.src.split("\n")[0];
    return Ltsv.parseLine(head);
  };

  TableTsv.prototype.getPName = function(){
    return this.getInfo().pname;
  };

  TableTsv.prototype.getColLNames = function(){
    var lines = this.src.split("\n");
    lines.shift();
    var line = lines.shift();
    return line.split("\t");
  };
  TableTsv.prototype.getColPNames = function(){
    var lines = this.src.split("\n");
    lines.shift();
    lines.shift();
    var line = lines.shift();
    return line.split("\t");
  };

  TableTsv.prototype.getDataLines = function(){
    var lines = this.src.split("\n");
    lines.shift();
    lines.shift();
    lines.shift();
    return lines;
  };

  TableTsv.prototype.makeInsertSql = function(
    tabPName, pnames, line
  ){
    var vs = line.split("\t");
    var sql = "INSERT into " + tabPName;

    // sql += " (\t" + pnames.join(",\t") + "\t)";

    sql += " values (\t";
    for(var i=0,len=pnames.length; i<len; i++){
      if(i >= 1){ sql += ",\t"; }
      var val = vs[i];
      var pname = pnames[i];
      sql += "/*" + pname + "*/";
      if(val === "<null>"){
        sql += "NULL";
      }else if(val === "<blank>"){
        sql += "''";
      }else{
        sql += squote(val);
      }
    }

    sql += "\t)";

    return sql;
  };

  TableTsv.prototype.makeSqls = function(){
    var me = this;
    var tabInfo = this.getInfo();

    var sqls = [];
    sqls.push("DELETE from " + tabInfo.pname);

    var lnames = this.getColLNames();
    var pnames = this.getColPNames();

    var lines = this.getDataLines();
    _ma(lines).filter(function(line){
      return line.length > 0;
    }).each(function(line){
      var sql = me.makeInsertSql(tabInfo.pname, pnames, line);
      sqls.push(sql);
    });

    return sqls;
  };


  return TableTsv;
})();

////////////////////////////////

function main(conn, odsFullPath){
  var src = _File.read(odsFullPath + ".tsv");

  // テーブルごとに分割
  var tsvs = src.split("<__TABLE__>");
  tsvs.shift(); // 最初の要素はゴミ

  var tabTsvs = _ma(tsvs).map(function(tsv){
    return new TableTsv(tsv);
  });

  // generate SQL
  var sqls = [];
  tabTsvs.each(function(tabTsv){
    var tabInfo = tabTsv.getInfo();
    puts(tabInfo.pname + " (" + tabInfo.lname + ")");
    var temp = tabTsv.makeSqls();
    sqls = concatArray(sqls, temp);
  });

  var text = "";
  text += "-- generated by soymilk import.js\n";
  text += "-- " + new Date() + "\n";

  _ma(sqls).each(function(sql){
    text += sql + ";\n";
  });
  _File.write(odsFullPath + ".sql", text);

  _ma(sqls).each(function(sql){
    withStatement(conn, function(stmt){
      try{
        stmt.executeUpdate(sql);
      }catch(ex){
        puts("something wrong:\n" + sql);
        puts(ex.message);
        throw ex;
      }
    });
  });
}

function loadConfig(){
  var json = _File.read("config.json");
  return eval("(" + json + ")");
}

var odsFullPath = "" + arguments[0];
var config = loadConfig();

withConnection(
  config
  ,function(conn){
    try{
      conn.setAutoCommit(false);
      main(conn, odsFullPath.replace(/\\/g, "/"));
      conn.commit();
    }catch(ex){
      if(conn){ conn.rollback(); }
      throw ex;
    }
  }
);
